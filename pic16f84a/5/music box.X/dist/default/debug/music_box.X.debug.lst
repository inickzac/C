

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Oct 08 23:14:43 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x4E,2
    24  0000                     
    25                           ; Version 2.30
    26                           ; Generated 26/08/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F84A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  0086                     	;# 
    74  0088                     	;# 
    75  0089                     	;# 
    76                           
    77                           	psect	eeprom_data
    78  0000  0001 0002 0003 0004 0005 0006 0004 0021 	db	1,2,3,4,5,6,4,33	;# 
    79  0008  0001 00EA 0005 0010 0002 0038 0004 0003 	db	1,234,5,16,2,56,4,3	;# 
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0088                     	;# 
   111  0089                     	;# 
   112  0008                     _EEDATA	set	8
   113  0009                     _EEADR	set	9
   114  0006                     _PORTBbits	set	6
   115  0001                     _TMR0	set	1
   116  000B                     _INTCONbits	set	11
   117  0088                     _EECON1	set	136
   118  0088                     _EECON1bits	set	136
   119  0085                     _TRISA	set	133
   120  0081                     _OPTION_REG	set	129
   121  0086                     _TRISB	set	134
   122  0081                     _OPTION_REGbits	set	129
   123                           
   124                           	psect	cinit
   125  000C                     start_initialization:	
   126                           ; #config settings
   127                           
   128  000C                     __initialization:
   129                           
   130                           ; Clear objects allocated to BANK0
   131  000C  1283               	bcf	3,5	;RP0=0, select bank0
   132  000D  019D               	clrf	__pbssBANK0& (0+127)
   133  000E  019E               	clrf	(__pbssBANK0+1)& (0+127)
   134  000F  019F               	clrf	(__pbssBANK0+2)& (0+127)
   135  0010                     end_of_initialization:	
   136                           ;End of C runtime variable initialization code
   137                           
   138  0010                     __end_of__initialization:
   139  0010  0183               	clrf	3
   140  0011  28E5               	ljmp	_main	;jump to C main() function
   141                           
   142                           	psect	bssBANK0
   143  001D                     __pbssBANK0:
   144  001D                     _sec:
   145  001D                     	ds	1
   146  001E                     _is_time_over:
   147  001E                     	ds	1
   148  001F                     _state:
   149  001F                     	ds	1
   150                           
   151                           	psect	cstackCOMMON
   152  0000                     __pcstackCOMMON:
   153  0000                     ??_main:
   154                           
   155                           	psect	cstackBANK0
   156  000C                     __pcstackBANK0:	
   157                           ; 1 bytes @ 0x0
   158                           
   159  000C                     ?_song_1:
   160  000C                     ?_song_2:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  000C                     ?_eeprom_read:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  000C                     ?_sound_11:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  000C                     ?_sound_12:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  000C                     ?_sound_13:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  000C                     ?_sound_14:	
   176                           ; 1 bytes @ 0x0
   177                           
   178  000C                     ?_sound_15:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  000C                     ?_sound_16:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  000C                     ?_make_sound:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  000C                     ?_my_isr_routine:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  000C                     ??_my_isr_routine:	
   191                           ; 1 bytes @ 0x0
   192                           
   193                           
   194                           ; 1 bytes @ 0x0
   195  000C                     	ds	3
   196  000F                     ??_eeprom_read:
   197  000F                     ??_sound_11:	
   198                           ; 1 bytes @ 0x3
   199                           
   200  000F                     ??_sound_12:	
   201                           ; 1 bytes @ 0x3
   202                           
   203  000F                     ??_sound_13:	
   204                           ; 1 bytes @ 0x3
   205                           
   206  000F                     ??_sound_14:	
   207                           ; 1 bytes @ 0x3
   208                           
   209  000F                     ??_sound_15:	
   210                           ; 1 bytes @ 0x3
   211                           
   212  000F                     ??_sound_16:	
   213                           ; 1 bytes @ 0x3
   214                           
   215                           
   216                           ; 1 bytes @ 0x3
   217  000F                     	ds	1
   218  0010                     sound_12@i:
   219  0010                     sound_14@i:	
   220                           ; 1 bytes @ 0x4
   221                           
   222  0010                     sound_16@i:	
   223                           ; 1 bytes @ 0x4
   224                           
   225  0010                     eeprom_read@addr:	
   226                           ; 1 bytes @ 0x4
   227                           
   228                           
   229                           ; 1 bytes @ 0x4
   230  0010                     	ds	1
   231  0011                     sound_11@i:
   232  0011                     sound_13@i:	
   233                           ; 1 bytes @ 0x5
   234                           
   235  0011                     sound_15@i:	
   236                           ; 1 bytes @ 0x5
   237                           
   238                           
   239                           ; 1 bytes @ 0x5
   240  0011                     	ds	1
   241  0012                     ??_make_sound:
   242                           
   243                           ; 1 bytes @ 0x6
   244  0012                     	ds	2
   245  0014                     make_sound@n:
   246                           
   247                           ; 1 bytes @ 0x8
   248  0014                     	ds	1
   249  0015                     ??_song_1:
   250  0015                     ??_song_2:	
   251                           ; 1 bytes @ 0x9
   252                           
   253                           
   254                           ; 1 bytes @ 0x9
   255  0015                     	ds	2
   256  0017                     song_1@i:
   257  0017                     song_2@i:	
   258                           ; 1 bytes @ 0xB
   259                           
   260                           
   261                           ; 1 bytes @ 0xB
   262  0017                     	ds	1
   263  0018                     song_1@value:
   264  0018                     song_2@value:	
   265                           ; 1 bytes @ 0xC
   266                           
   267                           
   268                           ; 1 bytes @ 0xC
   269  0018                     	ds	1
   270  0019                     ?_main:
   271  0019                     main@argc:	
   272                           ; 2 bytes @ 0xD
   273                           
   274                           
   275                           ; 2 bytes @ 0xD
   276  0019                     	ds	2
   277  001B                     main@argv:
   278                           
   279                           ; 2 bytes @ 0xF
   280  001B                     	ds	2
   281                           
   282                           	psect	maintext
   283  00E5                     __pmaintext:	
   284 ;;
   285 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   286 ;;
   287 ;; *************** function _main *****************
   288 ;; Defined at:
   289 ;;		line 29 in file "mb.c"
   290 ;; Parameters:    Size  Location     Type
   291 ;;  argc            2   13[BANK0 ] int 
   292 ;;  argv            2   15[BANK0 ] PTR PTR unsigned char 
   293 ;; Auto vars:     Size  Location     Type
   294 ;;		None
   295 ;; Return value:  Size  Location     Type
   296 ;;                  2   13[BANK0 ] int 
   297 ;; Registers used:
   298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : B00/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMMON   BANK0
   304 ;;      Params:         0       4
   305 ;;      Locals:         0       0
   306 ;;      Temps:          0       0
   307 ;;      Totals:         0       4
   308 ;;Total ram usage:        4 bytes
   309 ;; Hardware stack levels required when called:    4
   310 ;; This function calls:
   311 ;;		_song_1
   312 ;;		_song_2
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           
   319                           ;psect for function _main
   320  00E5                     _main:
   321  00E5                     l1152:	
   322                           ;incstack = 0
   323                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   324                           
   325                           
   326                           ;mb.c: 31:     OPTION_REGbits.INTEDG=0;
   327  00E5  1683               	bsf	3,5	;RP0=1, select bank1
   328  00E6  1301               	bcf	1,6	;volatile
   329                           
   330                           ;mb.c: 32:     INTCONbits.T0IE=1;
   331  00E7  168B               	bsf	11,5	;volatile
   332                           
   333                           ;mb.c: 33:     INTCONbits.RBIE=0;
   334  00E8  118B               	bcf	11,3	;volatile
   335                           
   336                           ;mb.c: 34:     INTCONbits.INTE=1;
   337  00E9  160B               	bsf	11,4	;volatile
   338                           
   339                           ;mb.c: 35:     INTCONbits.T0IF=0;
   340  00EA  110B               	bcf	11,2	;volatile
   341  00EB                     l1154:
   342                           
   343                           ;mb.c: 36:     TMR0=0;
   344  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   345  00EC  0181               	clrf	1	;volatile
   346  00ED                     l1156:
   347                           
   348                           ;mb.c: 37:     INTCONbits.GIE=1;
   349  00ED  178B               	bsf	11,7	;volatile
   350  00EE                     l1158:
   351                           
   352                           ;mb.c: 39:     TRISB = 0b01111111;
   353  00EE  307F               	movlw	127
   354  00EF  1683               	bsf	3,5	;RP0=1, select bank1
   355  00F0  0086               	movwf	6	;volatile
   356  00F1                     l1160:
   357                           
   358                           ;mb.c: 40:     OPTION_REG = 0b00000111;
   359  00F1  3007               	movlw	7
   360  00F2  0081               	movwf	1	;volatile
   361  00F3                     l1162:
   362                           
   363                           ;mb.c: 42:     {;mb.c: 43:      if(state==1) song_1();
   364  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   365  00F4  031F               	decf	_state,w
   366  00F5  1D03               	btfss	3,2
   367  00F6  28F8               	goto	u451
   368  00F7  28F9               	goto	u450
   369  00F8                     u451:
   370  00F8  28FA               	goto	l1166
   371  00F9                     u450:
   372  00F9                     l1164:
   373  00F9  219F               	fcall	_song_1
   374  00FA                     l1166:
   375                           
   376                           ;mb.c: 44:      if(state==2) song_2();
   377  00FA  3002               	movlw	2
   378  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   379  00FC  061F               	xorwf	_state,w
   380  00FD  1D03               	btfss	3,2
   381  00FE  2900               	goto	u461
   382  00FF  2901               	goto	u460
   383  0100                     u461:
   384  0100  2902               	goto	l1170
   385  0101                     u460:
   386  0101                     l1168:
   387  0101  2185               	fcall	_song_2
   388  0102                     l1170:
   389                           
   390                           ;mb.c: 45:         TRISA=0;
   391  0102  1683               	bsf	3,5	;RP0=1, select bank1
   392  0103  0185               	clrf	5	;volatile
   393  0104  28F3               	goto	l1162
   394  0105  280B               	ljmp	start
   395  0106                     __end_of_main:
   396                           
   397                           	psect	text1
   398  0185                     __ptext1:	
   399 ;; *************** function _song_2 *****************
   400 ;; Defined at:
   401 ;;		line 178 in file "mb.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  i               1   11[BANK0 ] unsigned char 
   406 ;;  value           1   12[BANK0 ] volatile unsigned char 
   407 ;;  address         1    0        unsigned char 
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0
   417 ;;      Params:         0       0
   418 ;;      Locals:         0       3
   419 ;;      Temps:          0       1
   420 ;;      Totals:         0       4
   421 ;;Total ram usage:        4 bytes
   422 ;; Hardware stack levels used:    1
   423 ;; Hardware stack levels required when called:    3
   424 ;; This function calls:
   425 ;;		_eeprom_read
   426 ;;		_make_sound
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           
   433                           ;psect for function _song_2
   434  0185                     _song_2:
   435  0185                     l1136:	
   436                           ;incstack = 0
   437                           ; Regs used in _song_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   438                           
   439                           
   440                           ;mb.c: 180:     volatile unsigned char value = 0x00;
   441  0185  1283               	bcf	3,5	;RP0=0, select bank0
   442  0186  0198               	clrf	song_2@value	;volatile
   443  0187                     l1138:
   444                           
   445                           ;mb.c: 182:      for(char i=3; i<6; i++)
   446  0187  3003               	movlw	3
   447  0188  0095               	movwf	??_song_2
   448  0189  0815               	movf	??_song_2,w
   449  018A  0097               	movwf	song_2@i
   450  018B                     l1144:
   451                           
   452                           ;mb.c: 183:      {;mb.c: 184:        value=eeprom_read(i);
   453  018B  0817               	movf	song_2@i,w
   454  018C  21B6               	fcall	_eeprom_read
   455  018D  1283               	bcf	3,5	;RP0=0, select bank0
   456  018E  0095               	movwf	??_song_2
   457  018F  0815               	movf	??_song_2,w
   458  0190  0098               	movwf	song_2@value	;volatile
   459  0191                     l1146:
   460                           
   461                           ;mb.c: 185:        make_sound(value);
   462  0191  0818               	movf	song_2@value,w	;volatile
   463  0192  2071               	fcall	_make_sound
   464  0193                     l1148:
   465                           
   466                           ;mb.c: 186:      }
   467  0193  3001               	movlw	1
   468  0194  1283               	bcf	3,5	;RP0=0, select bank0
   469  0195  0095               	movwf	??_song_2
   470  0196  0815               	movf	??_song_2,w
   471  0197  0797               	addwf	song_2@i,f
   472  0198                     l1150:
   473  0198  3006               	movlw	6
   474  0199  0217               	subwf	song_2@i,w
   475  019A  1C03               	skipc
   476  019B  299D               	goto	u441
   477  019C  299E               	goto	u440
   478  019D                     u441:
   479  019D  298B               	goto	l1144
   480  019E                     u440:
   481  019E                     l95:
   482  019E  0008               	return
   483  019F                     __end_of_song_2:
   484                           
   485                           	psect	text2
   486  019F                     __ptext2:	
   487 ;; *************** function _song_1 *****************
   488 ;; Defined at:
   489 ;;		line 167 in file "mb.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;  i               1   11[BANK0 ] unsigned char 
   494 ;;  value           1   12[BANK0 ] volatile unsigned char 
   495 ;;  address         1    0        unsigned char 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMMON   BANK0
   505 ;;      Params:         0       0
   506 ;;      Locals:         0       3
   507 ;;      Temps:          0       1
   508 ;;      Totals:         0       4
   509 ;;Total ram usage:        4 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    3
   512 ;; This function calls:
   513 ;;		_eeprom_read
   514 ;;		_make_sound
   515 ;; This function is called by:
   516 ;;		_main
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           
   521                           ;psect for function _song_1
   522  019F                     _song_1:
   523  019F                     l1122:	
   524                           ;incstack = 0
   525                           ; Regs used in _song_1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   526                           
   527                           
   528                           ;mb.c: 169:      volatile unsigned char value = 0x00;
   529  019F  1283               	bcf	3,5	;RP0=0, select bank0
   530  01A0  0198               	clrf	song_1@value	;volatile
   531                           
   532                           ;mb.c: 171:      for(char i=0; i<3; i++)
   533  01A1  0197               	clrf	song_1@i
   534  01A2                     l1128:
   535                           
   536                           ;mb.c: 172:      {;mb.c: 173:        value=eeprom_read(i);
   537  01A2  0817               	movf	song_1@i,w
   538  01A3  21B6               	fcall	_eeprom_read
   539  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   540  01A5  0095               	movwf	??_song_1
   541  01A6  0815               	movf	??_song_1,w
   542  01A7  0098               	movwf	song_1@value	;volatile
   543  01A8                     l1130:
   544                           
   545                           ;mb.c: 174:        make_sound(value);
   546  01A8  0818               	movf	song_1@value,w	;volatile
   547  01A9  2071               	fcall	_make_sound
   548  01AA                     l1132:
   549                           
   550                           ;mb.c: 175:      }
   551  01AA  3001               	movlw	1
   552  01AB  1283               	bcf	3,5	;RP0=0, select bank0
   553  01AC  0095               	movwf	??_song_1
   554  01AD  0815               	movf	??_song_1,w
   555  01AE  0797               	addwf	song_1@i,f
   556  01AF                     l1134:
   557  01AF  3003               	movlw	3
   558  01B0  0217               	subwf	song_1@i,w
   559  01B1  1C03               	skipc
   560  01B2  29B4               	goto	u431
   561  01B3  29B5               	goto	u430
   562  01B4                     u431:
   563  01B4  29A2               	goto	l1128
   564  01B5                     u430:
   565  01B5                     l90:
   566  01B5  0008               	return
   567  01B6                     __end_of_song_1:
   568                           
   569                           	psect	text3
   570  0071                     __ptext3:	
   571 ;; *************** function _make_sound *****************
   572 ;; Defined at:
   573 ;;		line 144 in file "mb.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;  n               1    wreg     unsigned char 
   576 ;; Auto vars:     Size  Location     Type
   577 ;;  n               1    8[BANK0 ] unsigned char 
   578 ;; Return value:  Size  Location     Type
   579 ;;                  1    wreg      void 
   580 ;; Registers used:
   581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMMON   BANK0
   587 ;;      Params:         0       0
   588 ;;      Locals:         0       1
   589 ;;      Temps:          0       2
   590 ;;      Totals:         0       3
   591 ;;Total ram usage:        3 bytes
   592 ;; Hardware stack levels used:    1
   593 ;; Hardware stack levels required when called:    2
   594 ;; This function calls:
   595 ;;		_sound_11
   596 ;;		_sound_12
   597 ;;		_sound_13
   598 ;;		_sound_14
   599 ;;		_sound_15
   600 ;;		_sound_16
   601 ;; This function is called by:
   602 ;;		_song_1
   603 ;;		_song_2
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           
   608                           ;psect for function _make_sound
   609  0071                     _make_sound:
   610                           
   611                           ;incstack = 0
   612                           ; Regs used in _make_sound: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   613                           ;make_sound@n stored from wreg
   614  0071  1283               	bcf	3,5	;RP0=0, select bank0
   615  0072  0094               	movwf	make_sound@n
   616  0073                     l1096:
   617                           
   618                           ;mb.c: 144: void make_sound(unsigned char n);mb.c: 145: {;mb.c: 146:     switch(n) {
   619  0073  287F               	goto	l1110
   620  0074                     l1098:
   621                           
   622                           ;mb.c: 148:     sound_11();
   623  0074  209C               	fcall	_sound_11
   624                           
   625                           ;mb.c: 149:    break;
   626  0075  289B               	goto	l85
   627  0076                     l1100:
   628                           
   629                           ;mb.c: 151:     sound_12();
   630  0076  2166               	fcall	_sound_12
   631                           
   632                           ;mb.c: 152:    break;
   633  0077  289B               	goto	l85
   634  0078                     l1102:
   635                           
   636                           ;mb.c: 154:     sound_13();
   637  0078  20C1               	fcall	_sound_13
   638  0079                     l82:	
   639                           ;mb.c: 155: case 4:
   640                           
   641                           
   642                           ;mb.c: 156:     sound_14();
   643  0079  2127               	fcall	_sound_14
   644                           
   645                           ;mb.c: 157:    break;
   646  007A  289B               	goto	l85
   647  007B                     l1104:
   648                           
   649                           ;mb.c: 159:     sound_15();
   650  007B  2106               	fcall	_sound_15
   651                           
   652                           ;mb.c: 160:    break;
   653  007C  289B               	goto	l85
   654  007D                     l1106:
   655                           
   656                           ;mb.c: 162:     sound_16();
   657  007D  2147               	fcall	_sound_16
   658                           
   659                           ;mb.c: 163:    break;
   660  007E  289B               	goto	l85
   661  007F                     l1110:
   662  007F  0814               	movf	make_sound@n,w
   663  0080  0092               	movwf	??_make_sound
   664  0081  0193               	clrf	??_make_sound+1
   665                           
   666                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   667                           ; Switch size 1, requested type "simple"
   668                           ; Number of cases is 1, Range of values is 0 to 0
   669                           ; switch strategies available:
   670                           ; Name         Instructions Cycles
   671                           ; simple_byte            4     3 (average)
   672                           ; direct_byte            7     6 (fixed)
   673                           ; jumptable            260     6 (fixed)
   674                           ;	Chosen strategy is simple_byte
   675  0082  0813               	movf	??_make_sound+1,w
   676  0083  3A00               	xorlw	0	; case 0
   677  0084  1903               	skipnz
   678  0085  2887               	goto	l1256
   679  0086  289B               	goto	l85
   680  0087                     l1256:
   681                           
   682                           ; Switch size 1, requested type "simple"
   683                           ; Number of cases is 6, Range of values is 1 to 6
   684                           ; switch strategies available:
   685                           ; Name         Instructions Cycles
   686                           ; direct_byte           15     9 (fixed)
   687                           ; simple_byte           19    10 (average)
   688                           ; jumptable            263     9 (fixed)
   689                           ;	Chosen strategy is simple_byte
   690  0087  0812               	movf	??_make_sound,w
   691  0088  3A01               	xorlw	1	; case 1
   692  0089  1903               	skipnz
   693  008A  2874               	goto	l1098
   694  008B  3A03               	xorlw	3	; case 2
   695  008C  1903               	skipnz
   696  008D  2876               	goto	l1100
   697  008E  3A01               	xorlw	1	; case 3
   698  008F  1903               	skipnz
   699  0090  2878               	goto	l1102
   700  0091  3A07               	xorlw	7	; case 4
   701  0092  1903               	skipnz
   702  0093  2879               	goto	l82
   703  0094  3A01               	xorlw	1	; case 5
   704  0095  1903               	skipnz
   705  0096  287B               	goto	l1104
   706  0097  3A03               	xorlw	3	; case 6
   707  0098  1903               	skipnz
   708  0099  287D               	goto	l1106
   709  009A  289B               	goto	l85
   710  009B                     l85:
   711  009B  0008               	return
   712  009C                     __end_of_make_sound:
   713                           
   714                           	psect	text4
   715  0147                     __ptext4:	
   716 ;; *************** function _sound_16 *****************
   717 ;; Defined at:
   718 ;;		line 127 in file "mb.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  i               1    4[BANK0 ] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0
   732 ;;      Params:         0       0
   733 ;;      Locals:         0       1
   734 ;;      Temps:          0       1
   735 ;;      Totals:         0       2
   736 ;;Total ram usage:        2 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    1
   739 ;; This function calls:
   740 ;;		Nothing
   741 ;; This function is called by:
   742 ;;		_make_sound
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           
   747                           ;psect for function _sound_16
   748  0147                     _sound_16:
   749  0147                     l1078:	
   750                           ;incstack = 0
   751                           ; Regs used in _sound_16: [wreg+status,2+status,0]
   752                           
   753                           
   754                           ;mb.c: 129:     for(char i=0; i<6; i++)
   755  0147  1283               	bcf	3,5	;RP0=0, select bank0
   756  0148  0190               	clrf	sound_16@i
   757  0149                     l1084:
   758                           
   759                           ;mb.c: 130:         {;mb.c: 131:             if(state==0)
   760  0149  081F               	movf	_state,w
   761  014A  1D03               	btfss	3,2
   762  014B  294D               	goto	u401
   763  014C  294E               	goto	u400
   764  014D                     u401:
   765  014D  294F               	goto	l73
   766  014E                     u400:
   767  014E  2965               	goto	l74
   768  014F                     l73:	
   769                           ;mb.c: 134:           }
   770                           
   771                           
   772                           ;mb.c: 135:           PORTBbits.RB7=1;
   773  014F  1786               	bsf	6,7	;volatile
   774  0150                     l1088:
   775                           
   776                           ;mb.c: 136:           _delay((unsigned long)((200)*(8000/4000.0)));
   777  0150  3085               	movlw	133
   778  0151  008F               	movwf	??_sound_16
   779  0152                     u597:
   780  0152  0B8F               	decfsz	??_sound_16,f
   781  0153  2952               	goto	u597
   782  0154                     l1090:
   783                           
   784                           ;mb.c: 137:           PORTBbits.RB7=0;
   785  0154  1283               	bcf	3,5	;RP0=0, select bank0
   786  0155  1386               	bcf	6,7	;volatile
   787                           
   788                           ;mb.c: 138:           _delay((unsigned long)((200)*(8000/4000.0)));
   789  0156  3085               	movlw	133
   790  0157  008F               	movwf	??_sound_16
   791  0158                     u607:
   792  0158  0B8F               	decfsz	??_sound_16,f
   793  0159  2958               	goto	u607
   794  015A                     l1092:
   795                           
   796                           ;mb.c: 139:         }
   797  015A  3001               	movlw	1
   798  015B  1283               	bcf	3,5	;RP0=0, select bank0
   799  015C  008F               	movwf	??_sound_16
   800  015D  080F               	movf	??_sound_16,w
   801  015E  0790               	addwf	sound_16@i,f
   802  015F                     l1094:
   803  015F  3006               	movlw	6
   804  0160  0210               	subwf	sound_16@i,w
   805  0161  1C03               	skipc
   806  0162  2964               	goto	u411
   807  0163  2965               	goto	u410
   808  0164                     u411:
   809  0164  2949               	goto	l1084
   810  0165                     u410:
   811  0165                     l74:
   812  0165  0008               	return
   813  0166                     __end_of_sound_16:
   814                           
   815                           	psect	text5
   816  0106                     __ptext5:	
   817 ;; *************** function _sound_15 *****************
   818 ;; Defined at:
   819 ;;		line 112 in file "mb.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  i               1    5[BANK0 ] unsigned char 
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMMON   BANK0
   833 ;;      Params:         0       0
   834 ;;      Locals:         0       1
   835 ;;      Temps:          0       2
   836 ;;      Totals:         0       3
   837 ;;Total ram usage:        3 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    1
   840 ;; This function calls:
   841 ;;		Nothing
   842 ;; This function is called by:
   843 ;;		_make_sound
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           
   848                           ;psect for function _sound_15
   849  0106                     _sound_15:
   850  0106                     l1058:	
   851                           ;incstack = 0
   852                           ; Regs used in _sound_15: [wreg+status,2+status,0]
   853                           
   854                           
   855                           ;mb.c: 114:     for(char i=0; i<5; i++)
   856  0106  1283               	bcf	3,5	;RP0=0, select bank0
   857  0107  0191               	clrf	sound_15@i
   858  0108                     l1064:
   859                           
   860                           ;mb.c: 115:         {;mb.c: 116:            if(state==0)
   861  0108  081F               	movf	_state,w
   862  0109  1D03               	btfss	3,2
   863  010A  290C               	goto	u381
   864  010B  290D               	goto	u380
   865  010C                     u381:
   866  010C  290E               	goto	l67
   867  010D                     u380:
   868  010D  2926               	goto	l68
   869  010E                     l67:	
   870                           ;mb.c: 119:           }
   871                           
   872                           
   873                           ;mb.c: 120:           PORTBbits.RB7=1;
   874  010E  1786               	bsf	6,7	;volatile
   875  010F                     l1068:
   876                           
   877                           ;mb.c: 121:           _delay((unsigned long)((4000)*(8000/4000.0)));
   878  010F  300B               	movlw	11
   879  0110  0090               	movwf	??_sound_15+1
   880  0111  3062               	movlw	98
   881  0112  008F               	movwf	??_sound_15
   882  0113                     u617:
   883  0113  0B8F               	decfsz	??_sound_15,f
   884  0114  2913               	goto	u617
   885  0115  0B90               	decfsz	??_sound_15+1,f
   886  0116  2913               	goto	u617
   887  0117  0000               	nop
   888  0118                     l1070:
   889                           
   890                           ;mb.c: 122:           PORTBbits.RB7=0;
   891  0118  1283               	bcf	3,5	;RP0=0, select bank0
   892  0119  1386               	bcf	6,7	;volatile
   893  011A                     l1072:
   894                           
   895                           ;mb.c: 123:           _delay((unsigned long)((1)*(8000/4000.0)));
   896  011A  291B               	nop2	;2 cycle nop
   897  011B                     l1074:
   898                           
   899                           ;mb.c: 124:         }
   900  011B  3001               	movlw	1
   901  011C  1283               	bcf	3,5	;RP0=0, select bank0
   902  011D  008F               	movwf	??_sound_15
   903  011E  080F               	movf	??_sound_15,w
   904  011F  0791               	addwf	sound_15@i,f
   905  0120                     l1076:
   906  0120  3005               	movlw	5
   907  0121  0211               	subwf	sound_15@i,w
   908  0122  1C03               	skipc
   909  0123  2925               	goto	u391
   910  0124  2926               	goto	u390
   911  0125                     u391:
   912  0125  2908               	goto	l1064
   913  0126                     u390:
   914  0126                     l68:
   915  0126  0008               	return
   916  0127                     __end_of_sound_15:
   917                           
   918                           	psect	text6
   919  0127                     __ptext6:	
   920 ;; *************** function _sound_14 *****************
   921 ;; Defined at:
   922 ;;		line 97 in file "mb.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  i               1    4[BANK0 ] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0
   936 ;;      Params:         0       0
   937 ;;      Locals:         0       1
   938 ;;      Temps:          0       1
   939 ;;      Totals:         0       2
   940 ;;Total ram usage:        2 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    1
   943 ;; This function calls:
   944 ;;		Nothing
   945 ;; This function is called by:
   946 ;;		_make_sound
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           
   951                           ;psect for function _sound_14
   952  0127                     _sound_14:
   953  0127                     l1040:	
   954                           ;incstack = 0
   955                           ; Regs used in _sound_14: [wreg+status,2+status,0]
   956                           
   957                           
   958                           ;mb.c: 99:     for(char i=0; i<16; i++)
   959  0127  1283               	bcf	3,5	;RP0=0, select bank0
   960  0128  0190               	clrf	sound_14@i
   961  0129                     l1046:
   962                           
   963                           ;mb.c: 100:         {;mb.c: 101:            if(state==0)
   964  0129  081F               	movf	_state,w
   965  012A  1D03               	btfss	3,2
   966  012B  292D               	goto	u361
   967  012C  292E               	goto	u360
   968  012D                     u361:
   969  012D  292F               	goto	l61
   970  012E                     u360:
   971  012E  2946               	goto	l62
   972  012F                     l61:	
   973                           ;mb.c: 104:           }
   974                           
   975                           
   976                           ;mb.c: 105:          PORTBbits.RB7=1;
   977  012F  1786               	bsf	6,7	;volatile
   978  0130                     l1050:
   979                           
   980                           ;mb.c: 106:           _delay((unsigned long)((200)*(8000/4000.0)));
   981  0130  3085               	movlw	133
   982  0131  008F               	movwf	??_sound_14
   983  0132                     u627:
   984  0132  0B8F               	decfsz	??_sound_14,f
   985  0133  2932               	goto	u627
   986  0134                     l1052:
   987                           
   988                           ;mb.c: 107:           PORTBbits.RB7=0;
   989  0134  1283               	bcf	3,5	;RP0=0, select bank0
   990  0135  1386               	bcf	6,7	;volatile
   991                           
   992                           ;mb.c: 108:           _delay((unsigned long)((100)*(8000/4000.0)));
   993  0136  3042               	movlw	66
   994  0137  008F               	movwf	??_sound_14
   995  0138                     u637:
   996  0138  0B8F               	decfsz	??_sound_14,f
   997  0139  2938               	goto	u637
   998  013A  0000               	nop
   999  013B                     l1054:
  1000                           
  1001                           ;mb.c: 109:         }
  1002  013B  3001               	movlw	1
  1003  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1004  013D  008F               	movwf	??_sound_14
  1005  013E  080F               	movf	??_sound_14,w
  1006  013F  0790               	addwf	sound_14@i,f
  1007  0140                     l1056:
  1008  0140  3010               	movlw	16
  1009  0141  0210               	subwf	sound_14@i,w
  1010  0142  1C03               	skipc
  1011  0143  2945               	goto	u371
  1012  0144  2946               	goto	u370
  1013  0145                     u371:
  1014  0145  2929               	goto	l1046
  1015  0146                     u370:
  1016  0146                     l62:
  1017  0146  0008               	return
  1018  0147                     __end_of_sound_14:
  1019                           
  1020                           	psect	text7
  1021  00C1                     __ptext7:	
  1022 ;; *************** function _sound_13 *****************
  1023 ;; Defined at:
  1024 ;;		line 82 in file "mb.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  i               1    5[BANK0 ] unsigned char 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, status,2, status,0
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0
  1038 ;;      Params:         0       0
  1039 ;;      Locals:         0       1
  1040 ;;      Temps:          0       2
  1041 ;;      Totals:         0       3
  1042 ;;Total ram usage:        3 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    1
  1045 ;; This function calls:
  1046 ;;		Nothing
  1047 ;; This function is called by:
  1048 ;;		_make_sound
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function _sound_13
  1054  00C1                     _sound_13:
  1055  00C1                     l1022:	
  1056                           ;incstack = 0
  1057                           ; Regs used in _sound_13: [wreg+status,2+status,0]
  1058                           
  1059                           
  1060                           ;mb.c: 84:     for(char i=0; i<16; i++)
  1061  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1062  00C2  0191               	clrf	sound_13@i
  1063  00C3                     l1028:
  1064                           
  1065                           ;mb.c: 85:         {;mb.c: 86:            if(state==0)
  1066  00C3  081F               	movf	_state,w
  1067  00C4  1D03               	btfss	3,2
  1068  00C5  28C7               	goto	u341
  1069  00C6  28C8               	goto	u340
  1070  00C7                     u341:
  1071  00C7  28C9               	goto	l55
  1072  00C8                     u340:
  1073  00C8  28E4               	goto	l56
  1074  00C9                     l55:	
  1075                           ;mb.c: 89:           }
  1076                           
  1077                           
  1078                           ;mb.c: 90:           PORTBbits.RB7=1;
  1079  00C9  1786               	bsf	6,7	;volatile
  1080  00CA                     l1032:
  1081                           
  1082                           ;mb.c: 91:           _delay((unsigned long)((50)*(8000/4000.0)));
  1083  00CA  3021               	movlw	33
  1084  00CB  008F               	movwf	??_sound_13
  1085  00CC                     u647:
  1086  00CC  0B8F               	decfsz	??_sound_13,f
  1087  00CD  28CC               	goto	u647
  1088  00CE                     l1034:
  1089                           
  1090                           ;mb.c: 92:           PORTBbits.RB7=0;
  1091  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1092  00CF  1386               	bcf	6,7	;volatile
  1093                           
  1094                           ;mb.c: 93:           _delay((unsigned long)((4000)*(8000/4000.0)));
  1095  00D0  300B               	movlw	11
  1096  00D1  0090               	movwf	??_sound_13+1
  1097  00D2  3062               	movlw	98
  1098  00D3  008F               	movwf	??_sound_13
  1099  00D4                     u657:
  1100  00D4  0B8F               	decfsz	??_sound_13,f
  1101  00D5  28D4               	goto	u657
  1102  00D6  0B90               	decfsz	??_sound_13+1,f
  1103  00D7  28D4               	goto	u657
  1104  00D8  0000               	nop
  1105  00D9                     l1036:
  1106                           
  1107                           ;mb.c: 94:         }
  1108  00D9  3001               	movlw	1
  1109  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1110  00DB  008F               	movwf	??_sound_13
  1111  00DC  080F               	movf	??_sound_13,w
  1112  00DD  0791               	addwf	sound_13@i,f
  1113  00DE                     l1038:
  1114  00DE  3010               	movlw	16
  1115  00DF  0211               	subwf	sound_13@i,w
  1116  00E0  1C03               	skipc
  1117  00E1  28E3               	goto	u351
  1118  00E2  28E4               	goto	u350
  1119  00E3                     u351:
  1120  00E3  28C3               	goto	l1028
  1121  00E4                     u350:
  1122  00E4                     l56:
  1123  00E4  0008               	return
  1124  00E5                     __end_of_sound_13:
  1125                           
  1126                           	psect	text8
  1127  0166                     __ptext8:	
  1128 ;; *************** function _sound_12 *****************
  1129 ;; Defined at:
  1130 ;;		line 67 in file "mb.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  i               1    4[BANK0 ] unsigned char 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, status,2, status,0
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0
  1144 ;;      Params:         0       0
  1145 ;;      Locals:         0       1
  1146 ;;      Temps:          0       1
  1147 ;;      Totals:         0       2
  1148 ;;Total ram usage:        2 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    1
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_make_sound
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           
  1159                           ;psect for function _sound_12
  1160  0166                     _sound_12:
  1161  0166                     l1004:	
  1162                           ;incstack = 0
  1163                           ; Regs used in _sound_12: [wreg+status,2+status,0]
  1164                           
  1165                           
  1166                           ;mb.c: 69:     for(char i=0; i<16; i++)
  1167  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0167  0190               	clrf	sound_12@i
  1169  0168                     l1010:
  1170                           
  1171                           ;mb.c: 70:         {;mb.c: 71:            if(state==0)
  1172  0168  081F               	movf	_state,w
  1173  0169  1D03               	btfss	3,2
  1174  016A  296C               	goto	u321
  1175  016B  296D               	goto	u320
  1176  016C                     u321:
  1177  016C  296E               	goto	l49
  1178  016D                     u320:
  1179  016D  2984               	goto	l50
  1180  016E                     l49:	
  1181                           ;mb.c: 74:           }
  1182                           
  1183                           
  1184                           ;mb.c: 75:           PORTBbits.RB7=1;
  1185  016E  1786               	bsf	6,7	;volatile
  1186  016F                     l1014:
  1187                           
  1188                           ;mb.c: 76:           _delay((unsigned long)((5)*(8000/4000.0)));
  1189  016F  3003               	movlw	3
  1190  0170  008F               	movwf	??_sound_12
  1191  0171                     u667:
  1192  0171  0B8F               	decfsz	??_sound_12,f
  1193  0172  2971               	goto	u667
  1194  0173                     l1016:
  1195                           
  1196                           ;mb.c: 77:           PORTBbits.RB7=0;
  1197  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1198  0174  1386               	bcf	6,7	;volatile
  1199                           
  1200                           ;mb.c: 78:           _delay((unsigned long)((20)*(8000/4000.0)));
  1201  0175  300D               	movlw	13
  1202  0176  008F               	movwf	??_sound_12
  1203  0177                     u677:
  1204  0177  0B8F               	decfsz	??_sound_12,f
  1205  0178  2977               	goto	u677
  1206  0179                     l1018:
  1207                           
  1208                           ;mb.c: 79:         }
  1209  0179  3001               	movlw	1
  1210  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1211  017B  008F               	movwf	??_sound_12
  1212  017C  080F               	movf	??_sound_12,w
  1213  017D  0790               	addwf	sound_12@i,f
  1214  017E                     l1020:
  1215  017E  3010               	movlw	16
  1216  017F  0210               	subwf	sound_12@i,w
  1217  0180  1C03               	skipc
  1218  0181  2983               	goto	u331
  1219  0182  2984               	goto	u330
  1220  0183                     u331:
  1221  0183  2968               	goto	l1010
  1222  0184                     u330:
  1223  0184                     l50:
  1224  0184  0008               	return
  1225  0185                     __end_of_sound_12:
  1226                           
  1227                           	psect	text9
  1228  009C                     __ptext9:	
  1229 ;; *************** function _sound_11 *****************
  1230 ;; Defined at:
  1231 ;;		line 52 in file "mb.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  i               1    5[BANK0 ] unsigned char 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0
  1245 ;;      Params:         0       0
  1246 ;;      Locals:         0       1
  1247 ;;      Temps:          0       2
  1248 ;;      Totals:         0       3
  1249 ;;Total ram usage:        3 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    1
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_make_sound
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           
  1260                           ;psect for function _sound_11
  1261  009C                     _sound_11:
  1262  009C                     l986:	
  1263                           ;incstack = 0
  1264                           ; Regs used in _sound_11: [wreg+status,2+status,0]
  1265                           
  1266                           
  1267                           ;mb.c: 54:     for(char i=0; i<16; i++)
  1268  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1269  009D  0191               	clrf	sound_11@i
  1270  009E                     l992:
  1271                           
  1272                           ;mb.c: 55:         {;mb.c: 56:            if(state==0)
  1273  009E  081F               	movf	_state,w
  1274  009F  1D03               	btfss	3,2
  1275  00A0  28A2               	goto	u301
  1276  00A1  28A3               	goto	u300
  1277  00A2                     u301:
  1278  00A2  28A4               	goto	l43
  1279  00A3                     u300:
  1280  00A3  28C0               	goto	l44
  1281  00A4                     l43:	
  1282                           ;mb.c: 59:           }
  1283                           
  1284                           
  1285                           ;mb.c: 60:           PORTBbits.RB7=1;
  1286  00A4  1786               	bsf	6,7	;volatile
  1287  00A5                     l996:
  1288                           
  1289                           ;mb.c: 61:           _delay((unsigned long)((1000)*(8000/4000.0)));
  1290  00A5  3003               	movlw	3
  1291  00A6  0090               	movwf	??_sound_11+1
  1292  00A7  3097               	movlw	151
  1293  00A8  008F               	movwf	??_sound_11
  1294  00A9                     u687:
  1295  00A9  0B8F               	decfsz	??_sound_11,f
  1296  00AA  28A9               	goto	u687
  1297  00AB  0B90               	decfsz	??_sound_11+1,f
  1298  00AC  28A9               	goto	u687
  1299  00AD  28AE               	nop2
  1300  00AE                     l998:
  1301                           
  1302                           ;mb.c: 62:           PORTBbits.RB7=0;
  1303  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1304  00AF  1386               	bcf	6,7	;volatile
  1305                           
  1306                           ;mb.c: 63:           _delay((unsigned long)((10)*(8000/4000.0)));
  1307  00B0  3006               	movlw	6
  1308  00B1  008F               	movwf	??_sound_11
  1309  00B2                     u697:
  1310  00B2  0B8F               	decfsz	??_sound_11,f
  1311  00B3  28B2               	goto	u697
  1312  00B4  0000               	nop
  1313  00B5                     l1000:
  1314                           
  1315                           ;mb.c: 64:         }
  1316  00B5  3001               	movlw	1
  1317  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1318  00B7  008F               	movwf	??_sound_11
  1319  00B8  080F               	movf	??_sound_11,w
  1320  00B9  0791               	addwf	sound_11@i,f
  1321  00BA                     l1002:
  1322  00BA  3010               	movlw	16
  1323  00BB  0211               	subwf	sound_11@i,w
  1324  00BC  1C03               	skipc
  1325  00BD  28BF               	goto	u311
  1326  00BE  28C0               	goto	u310
  1327  00BF                     u311:
  1328  00BF  289E               	goto	l992
  1329  00C0                     u310:
  1330  00C0                     l44:
  1331  00C0  0008               	return
  1332  00C1                     __end_of_sound_11:
  1333                           
  1334                           	psect	text10
  1335  01B6                     __ptext10:	
  1336 ;; *************** function _eeprom_read *****************
  1337 ;; Defined at:
  1338 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\pic\__eeread.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  addr            1    wreg     unsigned char 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  addr            1    4[BANK0 ] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      unsigned char 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0
  1352 ;;      Params:         0       0
  1353 ;;      Locals:         0       1
  1354 ;;      Temps:          0       1
  1355 ;;      Totals:         0       2
  1356 ;;Total ram usage:        2 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_song_1
  1363 ;;		_song_2
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           
  1368                           ;psect for function _eeprom_read
  1369  01B6                     _eeprom_read:
  1370                           
  1371                           ;incstack = 0
  1372                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  1373                           ;eeprom_read@addr stored from wreg
  1374  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1375  01B7  0090               	movwf	eeprom_read@addr
  1376  01B8                     l204:	
  1377                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\pic\__eeread.c: 8:  do
  1378                           
  1379  01B8  0064               	clrwdt	;# 
  1380  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1381  01BA  1888               	btfsc	8,1	;volsfr
  1382  01BB  29BD               	goto	u421
  1383  01BC  29BE               	goto	u420
  1384  01BD                     u421:
  1385  01BD  29B8               	goto	l204
  1386  01BE                     u420:
  1387  01BE                     l1118:
  1388                           
  1389                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  1390  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1391  01BF  0810               	movf	eeprom_read@addr,w
  1392  01C0  0089               	movwf	9	;volatile
  1393  01C1  303F               	movlw	63
  1394  01C2  008F               	movwf	??_eeprom_read
  1395  01C3  080F               	movf	??_eeprom_read,w
  1396  01C4  1683               	bsf	3,5	;RP0=1, select bank1
  1397  01C5  0588               	andwf	8,f	;volsfr
  1398  01C6  1408               	bsf	8,0	;volsfr
  1399  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1400  01C8  0808               	movf	8,w	;volatile
  1401  01C9                     l206:
  1402  01C9  0008               	return
  1403  01CA                     __end_of_eeprom_read:
  1404                           
  1405                           	psect	text11
  1406  0012                     __ptext11:	
  1407 ;; *************** function _my_isr_routine *****************
  1408 ;; Defined at:
  1409 ;;		line 189 in file "mb.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0
  1423 ;;      Params:         0       0
  1424 ;;      Locals:         0       0
  1425 ;;      Temps:          0       3
  1426 ;;      Totals:         0       3
  1427 ;;Total ram usage:        3 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		Interrupt level 1
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           
  1437                           ;psect for function _my_isr_routine
  1438  0012                     _my_isr_routine:
  1439  0012                     i1l1172:
  1440                           
  1441                           ;mb.c: 191:     if(INTCONbits.T0IF )
  1442  0012  1D0B               	btfss	11,2	;volatile
  1443  0013  2815               	goto	u47_21
  1444  0014  2816               	goto	u47_20
  1445  0015                     u47_21:
  1446  0015  2830               	goto	i1l1188
  1447  0016                     u47_20:
  1448  0016                     i1l1174:
  1449                           
  1450                           ;mb.c: 192:     {;mb.c: 193:         sec++;
  1451  0016  3001               	movlw	1
  1452  0017  008C               	movwf	??_my_isr_routine
  1453  0018  080C               	movf	??_my_isr_routine,w
  1454  0019  079D               	addwf	_sec,f
  1455                           
  1456                           ;mb.c: 194:         if(state==1 && sec==10)
  1457  001A  031F               	decf	_state,w
  1458  001B  1D03               	btfss	3,2
  1459  001C  281E               	goto	u48_21
  1460  001D  281F               	goto	u48_20
  1461  001E                     u48_21:
  1462  001E  2828               	goto	i1l1182
  1463  001F                     u48_20:
  1464  001F                     i1l1176:
  1465  001F  300A               	movlw	10
  1466  0020  061D               	xorwf	_sec,w
  1467  0021  1D03               	btfss	3,2
  1468  0022  2824               	goto	u49_21
  1469  0023  2825               	goto	u49_20
  1470  0024                     u49_21:
  1471  0024  2828               	goto	i1l1182
  1472  0025                     u49_20:
  1473  0025                     i1l1178:
  1474                           
  1475                           ;mb.c: 195:         {;mb.c: 196:             is_time_over = 1;
  1476  0025  019E               	clrf	_is_time_over
  1477  0026  0A9E               	incf	_is_time_over,f
  1478  0027                     i1l1180:
  1479                           
  1480                           ;mb.c: 197:             sec=0;
  1481  0027  019D               	clrf	_sec
  1482  0028                     i1l1182:
  1483                           
  1484                           ;mb.c: 199:         if(sec==10) sec=0;
  1485  0028  300A               	movlw	10
  1486  0029  061D               	xorwf	_sec,w
  1487  002A  1D03               	btfss	3,2
  1488  002B  282D               	goto	u50_21
  1489  002C  282E               	goto	u50_20
  1490  002D                     u50_21:
  1491  002D  282F               	goto	i1l1186
  1492  002E                     u50_20:
  1493  002E                     i1l1184:
  1494  002E  019D               	clrf	_sec
  1495  002F                     i1l1186:
  1496                           
  1497                           ;mb.c: 201:         INTCONbits.T0IF=0;
  1498  002F  110B               	bcf	11,2	;volatile
  1499  0030                     i1l1188:
  1500                           
  1501                           ;mb.c: 203:     if(INTCONbits.INTF )
  1502  0030  1C8B               	btfss	11,1	;volatile
  1503  0031  2833               	goto	u51_21
  1504  0032  2834               	goto	u51_20
  1505  0033                     u51_21:
  1506  0033  286A               	goto	i1l108
  1507  0034                     u51_20:
  1508  0034  2835               	goto	i1l104
  1509  0035                     i1l105:
  1510  0035                     i1l104:	
  1511                           ;mb.c: 206:         {;mb.c: 207:           _delay((unsigned long)((0)*(8000/4000.0)));
  1512                           ;mb.c: 208:         }
  1513                           
  1514                           
  1515                           ;mb.c: 205:         while(PORTBbits.RB0==0)
  1516  0035  1283               	bcf	3,5	;RP0=0, select bank0
  1517  0036  1C06               	btfss	6,0	;volatile
  1518  0037  2839               	goto	u52_21
  1519  0038  283A               	goto	u52_20
  1520  0039                     u52_21:
  1521  0039  2835               	goto	i1l105
  1522  003A                     u52_20:
  1523  003A                     i1l106:
  1524                           
  1525                           ;mb.c: 209:         INTCONbits.INTF=0;
  1526  003A  108B               	bcf	11,1	;volatile
  1527  003B                     i1l1192:
  1528                           
  1529                           ;mb.c: 212:         if(state==0)
  1530  003B  081F               	movf	_state,w
  1531  003C  1D03               	btfss	3,2
  1532  003D  283F               	goto	u53_21
  1533  003E  2840               	goto	u53_20
  1534  003F                     u53_21:
  1535  003F  2848               	goto	i1l1204
  1536  0040                     u53_20:
  1537  0040                     i1l1194:
  1538                           
  1539                           ;mb.c: 213:         {;mb.c: 214:             TMR0=0;
  1540  0040  0181               	clrf	1	;volatile
  1541  0041                     i1l1196:
  1542                           
  1543                           ;mb.c: 215:             state++;
  1544  0041  3001               	movlw	1
  1545  0042  008C               	movwf	??_my_isr_routine
  1546  0043  080C               	movf	??_my_isr_routine,w
  1547  0044  079F               	addwf	_state,f
  1548  0045                     i1l1198:
  1549                           
  1550                           ;mb.c: 216:             is_time_over = 0;
  1551  0045  019E               	clrf	_is_time_over
  1552  0046                     i1l1200:
  1553                           
  1554                           ;mb.c: 217:             sec=0;
  1555  0046  019D               	clrf	_sec
  1556  0047  286A               	goto	i1l108
  1557  0048                     i1l1204:
  1558                           
  1559                           ;mb.c: 221:         if(state==2)
  1560  0048  3002               	movlw	2
  1561  0049  061F               	xorwf	_state,w
  1562  004A  1D03               	btfss	3,2
  1563  004B  284D               	goto	u54_21
  1564  004C  284E               	goto	u54_20
  1565  004D                     u54_21:
  1566  004D  2850               	goto	i1l1210
  1567  004E                     u54_20:
  1568  004E                     i1l1206:
  1569                           
  1570                           ;mb.c: 222:         {;mb.c: 223:           state=0;
  1571  004E  019F               	clrf	_state
  1572  004F  286A               	goto	i1l108
  1573  0050                     i1l1210:
  1574                           
  1575                           ;mb.c: 227:         if(state==1 && is_time_over==0)
  1576  0050  031F               	decf	_state,w
  1577  0051  1D03               	btfss	3,2
  1578  0052  2854               	goto	u55_21
  1579  0053  2855               	goto	u55_20
  1580  0054                     u55_21:
  1581  0054  285F               	goto	i1l1218
  1582  0055                     u55_20:
  1583  0055                     i1l1212:
  1584  0055  081E               	movf	_is_time_over,w
  1585  0056  1D03               	btfss	3,2
  1586  0057  2859               	goto	u56_21
  1587  0058  285A               	goto	u56_20
  1588  0059                     u56_21:
  1589  0059  285F               	goto	i1l1218
  1590  005A                     u56_20:
  1591  005A                     i1l1214:
  1592                           
  1593                           ;mb.c: 228:         {;mb.c: 229:           state++;
  1594  005A  3001               	movlw	1
  1595  005B  008C               	movwf	??_my_isr_routine
  1596  005C  080C               	movf	??_my_isr_routine,w
  1597  005D  079F               	addwf	_state,f
  1598  005E  286A               	goto	i1l108
  1599  005F                     i1l1218:
  1600                           
  1601                           ;mb.c: 233:         if(state==1 && is_time_over==1)
  1602  005F  031F               	decf	_state,w
  1603  0060  1D03               	btfss	3,2
  1604  0061  2863               	goto	u57_21
  1605  0062  2864               	goto	u57_20
  1606  0063                     u57_21:
  1607  0063  286A               	goto	i1l108
  1608  0064                     u57_20:
  1609  0064                     i1l1220:
  1610  0064  031E               	decf	_is_time_over,w
  1611  0065  1D03               	btfss	3,2
  1612  0066  2868               	goto	u58_21
  1613  0067  2869               	goto	u58_20
  1614  0068                     u58_21:
  1615  0068  286A               	goto	i1l108
  1616  0069                     u58_20:
  1617  0069  284E               	goto	i1l1206
  1618  006A                     i1l108:
  1619  006A  080E               	movf	??_my_isr_routine+2,w
  1620  006B  008A               	movwf	10
  1621  006C  0E0D               	swapf	??_my_isr_routine+1,w
  1622  006D  0083               	movwf	3
  1623  006E  0ECE               	swapf	btemp,f
  1624  006F  0E4E               	swapf	btemp,w
  1625  0070  0009               	retfie
  1626  0071                     __end_of_my_isr_routine:
  1627  004E                     btemp	set	78	;btemp
  1628  004E                     wtemp0	set	78
  1629                           
  1630                           	psect	intentry
  1631  0004                     __pintentry:	
  1632                           ;incstack = 0
  1633                           ; Regs used in _my_isr_routine: [wreg+status,2+status,0]
  1634                           
  1635  0004                     interrupt_function:
  1636  004E                     saved_w	set	btemp
  1637  0004  00CE               	movwf	btemp
  1638  0005  0E03               	swapf	3,w
  1639  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1640  0007  008D               	movwf	??_my_isr_routine+1
  1641  0008  080A               	movf	10,w
  1642  0009  008E               	movwf	??_my_isr_routine+2
  1643  000A  2812               	ljmp	_my_isr_routine
  1644                           
  1645                           	psect	config
  1646                           
  1647                           ;Config register CONFIG @ 0x2007
  1648                           ;	Oscillator Selection bits
  1649                           ;	FOSC = EXTRC, RC oscillator
  1650                           ;	Watchdog Timer
  1651                           ;	WDTE = OFF, WDT disabled
  1652                           ;	Power-up Timer Enable bit
  1653                           ;	PWRTE = OFF, Power-up Timer is disabled
  1654                           ;	Code Protection bit
  1655                           ;	CP = OFF, Code protection disabled
  1656  2007                     	org	8199
  1657  2007  3FFB               	dw	16379

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     17      20

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr_routine in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_song_1
    _main->_song_2
    _song_2->_make_sound
    _song_1->_make_sound
    _make_sound->_sound_11
    _make_sound->_sound_13
    _make_sound->_sound_15

Critical Paths under _my_isr_routine in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4     826
                                             13 BANK0      4     0      4
                             _song_1
                             _song_2
 ---------------------------------------------------------------------------------
 (1) _song_2                                               4     4      0     413
                                              9 BANK0      4     4      0
                        _eeprom_read
                         _make_sound
 ---------------------------------------------------------------------------------
 (1) _song_1                                               4     4      0     413
                                              9 BANK0      4     4      0
                        _eeprom_read
                         _make_sound
 ---------------------------------------------------------------------------------
 (2) _make_sound                                           3     3      0     298
                                              6 BANK0      3     3      0
                           _sound_11
                           _sound_12
                           _sound_13
                           _sound_14
                           _sound_15
                           _sound_16
 ---------------------------------------------------------------------------------
 (3) _sound_16                                             2     2      0      46
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _sound_15                                             3     3      0      46
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _sound_14                                             2     2      0      46
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _sound_13                                             3     3      0      46
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _sound_12                                             2     2      0      46
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _sound_11                                             3     3      0      46
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _my_isr_routine                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _song_1
     _eeprom_read
     _make_sound
       _sound_11
       _sound_12
       _sound_13
       _sound_14
       _sound_15
       _sound_16
   _song_2
     _eeprom_read
     _make_sound
       _sound_11
       _sound_12
       _sound_13
       _sound_14
       _sound_15
       _sound_16

 _my_isr_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     11      14       3       30.3%
ABS                  0      0      14       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      14       6        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Oct 08 23:14:43 2020

                     l50 0184                       l43 00A4                       l44 00C0  
                     l61 012F                       l62 0146                       l55 00C9  
                     l56 00E4                       l49 016E                       l73 014F  
                     l74 0165                       l82 0079                       l90 01B5  
                     l67 010E                       l68 0126                       l85 009B  
                     l95 019E                      l204 01B8                      l206 01C9  
                    l992 009E                      l986 009C                      l996 00A5  
                    l998 00AE                      u300 00A3                      u301 00A2  
                    u310 00C0                      u311 00BF                      u320 016D  
                    u400 014E                      u321 016C                      u401 014D  
                    u330 0184                      u410 0165                      u331 0183  
                    u411 0164                      u420 01BE                      u340 00C8  
                    u421 01BD                      u341 00C7                      u350 00E4  
                    u430 01B5                      u351 00E3                      u431 01B4  
                    u360 012E                      u440 019E                      u361 012D  
                    u441 019D                      u370 0146                      u450 00F9  
                    u371 0145                      u451 00F8                      u380 010D  
                    u460 0101                      u381 010C                      u461 0100  
                    u390 0126                      u391 0125                      u607 0158  
                    u617 0113                      u627 0132                      u637 0138  
                    u647 00CC                      u657 00D4                      u667 0171  
                    u677 0177                      u597 0152                      u687 00A9  
                    u697 00B2                      _sec 001D                     l1000 00B5  
                   l1002 00BA                     l1010 0168                     l1020 017E  
                   l1004 0166                     l1100 0076                     l1014 016F  
                   l1022 00C1                     l1102 0078                     l1110 007F  
                   l1016 0173                     l1032 00CA                     l1040 0127  
                   l1104 007B                     l1018 0179                     l1034 00CE  
                   l1050 0130                     l1106 007D                     l1130 01A8  
                   l1122 019F                     l1036 00D9                     l1028 00C3  
                   l1052 0134                     l1132 01AA                     l1118 01BE  
                   l1038 00DE                     l1054 013B                     l1046 0129  
                   l1070 0118                     l1134 01AF                     l1150 0198  
                   l1056 0140                     l1072 011A                     l1064 0108  
                   l1128 01A2                     l1144 018B                     l1136 0185  
                   l1160 00F1                     l1152 00E5                     l1074 011B  
                   l1058 0106                     l1090 0154                     l1146 0191  
                   l1138 0187                     l1170 0102                     l1162 00F3  
                   l1154 00EB                     l1076 0120                     l1068 010F  
                   l1092 015A                     l1084 0149                     l1148 0193  
                   l1164 00F9                     l1156 00ED                     l1094 015F  
                   l1078 0147                     l1166 00FA                     l1158 00EE  
                   l1088 0150                     l1256 0087                     l1096 0073  
                   l1168 0101                     l1098 0074                     _TMR0 0001  
                   _main 00E5                     btemp 004E                     start 000B  
                  ?_main 0019                    _EEADR 0009                    i1l104 0035  
                  i1l105 0035                    i1l106 003A                    i1l108 006A  
                  u50_20 002E                    u50_21 002D                    u51_20 0034  
                  u51_21 0033                    u52_20 003A                    u52_21 0039  
                  u53_20 0040                    u53_21 003F                    u54_20 004E  
                  u54_21 004D                    u55_20 0055                    u47_20 0016  
                  u55_21 0054                    u47_21 0015                    u56_20 005A  
                  u48_20 001F                    u56_21 0059                    u48_21 001E  
                  u57_20 0064                    u49_20 0025                    u57_21 0063  
                  u49_21 0024                    _TRISA 0085                    _TRISB 0086  
                  u58_20 0069                    u58_21 0068              make_sound@n 0014  
                  _state 001F                    pclath 000A                    status 0003  
                  wtemp0 004E          __initialization 000C             __end_of_main 0106  
                 ??_main 0000                   _EEDATA 0008                   _EECON1 0088  
                 i1l1200 0046                   i1l1210 0050                   i1l1220 0064  
                 i1l1212 0055                   i1l1204 0048                   i1l1214 005A  
                 i1l1206 004E                   i1l1218 005F                   i1l1180 0027  
                 i1l1172 0012                   i1l1182 0028                   i1l1174 0016  
                 i1l1192 003B                   i1l1184 002E                   i1l1176 001F  
                 i1l1194 0040                   i1l1186 002F                   i1l1178 0025  
                 i1l1196 0041                   i1l1188 0030                   i1l1198 0045  
   __size_of_eeprom_read 0014                   _song_1 019F                   _song_2 0185  
                 saved_w 004E         __end_of_sound_11 00C1         __end_of_sound_12 0185  
       __end_of_sound_13 00E5         __end_of_sound_14 0147         __end_of_sound_15 0127  
       __end_of_sound_16 0166  __end_of__initialization 0010          eeprom_read@addr 0010  
         __pcstackCOMMON 0000           _OPTION_REGbits 0081               __pbssBANK0 001D  
             __pmaintext 00E5               __pintentry 0004                  ?_song_1 000C  
                ?_song_2 000C  __size_of_my_isr_routine 005F               _make_sound 0071  
              ?_sound_11 000C                ?_sound_12 000C                ?_sound_13 000C  
              ?_sound_14 000C                ?_sound_15 000C                ?_sound_16 000C  
                __ptext1 0185                  __ptext2 019F                  __ptext3 0071  
                __ptext4 0147                  __ptext5 0106                  __ptext6 0127  
                __ptext7 00C1                  __ptext8 0166                  __ptext9 009C  
        __size_of_song_1 0017          __size_of_song_2 001A     end_of_initialization 0010  
                song_1@i 0017                  song_2@i 0017               ??_sound_11 000F  
             ??_sound_12 000F               ??_sound_13 000F               ??_sound_14 000F  
             ??_sound_15 000F               ??_sound_16 000F              song_1@value 0018  
            song_2@value 0018                _PORTBbits 0006              ?_make_sound 000C  
          ??_eeprom_read 000F           __end_of_song_1 01B6           __end_of_song_2 019F  
    start_initialization 000C           _my_isr_routine 0012      __end_of_eeprom_read 01CA  
               ??_song_1 0015                 ??_song_2 0015      __size_of_make_sound 002B  
              ___latbits 0000            __pcstackBANK0 000C   __end_of_my_isr_routine 0071  
           _is_time_over 001E        __size_of_sound_11 0025        __size_of_sound_12 001F  
      __size_of_sound_13 0024        __size_of_sound_14 0020        __size_of_sound_15 0021  
      __size_of_sound_16 001F          ?_my_isr_routine 000C        interrupt_function 0004  
            _eeprom_read 01B6             ??_make_sound 0012               _EECON1bits 0088  
     __end_of_make_sound 009C                 __ptext10 01B6                 __ptext11 0012  
          __size_of_main 0021                 _sound_11 009C                 _sound_12 0166  
               _sound_13 00C1                 _sound_14 0127                 _sound_15 0106  
               _sound_16 0147                 main@argc 0019                 main@argv 001B  
             _INTCONbits 000B                sound_11@i 0011                sound_12@i 0010  
              sound_13@i 0011                sound_14@i 0010                sound_15@i 0011  
              sound_16@i 0010                 intlevel1 0000         ??_my_isr_routine 000C  
             _OPTION_REG 0081             ?_eeprom_read 000C  
